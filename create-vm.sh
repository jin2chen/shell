#!/bin/bash

# ARGBASH_SET_INDENT([  ])
# DEFINE_SCRIPT_DIR([])
# ARG_POSITIONAL_SINGLE([id],[Integer 0 - 255])
# ARG_DEFAULTS_POS()
# ARG_HELP([])
# ARG_TYPE_GROUP([int],[int],[id])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}

# validators

int()
{
	printf "%s" "$1" | grep -q '^\s*[+-]\?[0-9]\+\s*$' || die "The value of argument '$2' is '$1', which is not an integer."
	printf "%d" "$1"
}


begins_with_short_option()
{
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_id=
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
  printf 'Usage: %s [-h|--help] <id>\n' "$0"
  printf '\t%s\n' "<id>: Integer 0 - 255"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'id'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_id "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")" && pwd)" || die "Couldn't determine the script's running directory, which probably matters, bailing out" 2
# Validation of values
_arg_id="$(int "$_arg_id" "id")" || exit 1

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

set -e

VM_BASE_PATH=/var/lib/libvirt/instances
VM_BACK_STORE=/var/lib/libvirt/boot/ubuntu-1804.img
VM_STORE_SIZE=8
VM_ID=$(uuidgen)
VM_NAME=vm$(printf %02d $_arg_id)
VM_MAC=$(echo '00 60 2f'$(od -An -N3 -t xC /dev/urandom) | sed -e 's/ /:/g')
VM_NET=host-bridge
VM_IP=192.168.0.${_arg_id}/24
VM_GATEWAY=192.168.0.1
VM_DNS=192.168.0.1
VM_DNS_SEARCH=jinchen.me
VM_PATH=${VM_BASE_PATH}/${VM_NAME}
SECTION_BREAK='################'
VIRSH=virsh

run() {
  echo "$*"
  eval "$*"
}

echo "Clean & Prepare ${SECTION_BREAK}"
run "$VIRSH destroy ${VM_NAME} &> /dev/null || true"
run "$VIRSH undefine ${VM_NAME} &> /dev/null || true"
run "rm -rf ${VM_PATH}"
run "mkdir -p ${VM_PATH}"
run "cd ${VM_PATH}"

echo -e "\nBuild meta-data ${SECTION_BREAK}"
tee meta-data <<EOT
instance-id: ${VM_ID}
hostname: ${VM_NAME}
EOT

echo -e "\nBuild user-data ${SECTION_BREAK}"
tee user-data <<EOT
#cloud-config
hostname: ${VM_NAME}
users:
  - name: root
    lock_passwd: false
    ssh_pwauth: true
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDF3xPhlSB7zRnymi1WfdkMrSnpky8Xx0NcULlruNhD2V/OkACwi6ZIjUMbX0sqDteBsshzVv7yCHzlU9rQKrjxGUIBovjz6REcWfN5ZT4mhUyvSpR9QtRzBPqNTE64zTrwr/57SCBJfly7Ew24y0kPhjHTLcDejzRoeGAuOpmRUS3LS1IUvsndkHRdeytcZxe9e1KEMn+YTuea+WylBU0KRstFwlvrsfCgXhdG4ei3lCguO5Xfe6daP1hiPtc8ozia63avHIHCvF7NNAoThRoE2ftESNNZkd1AUpSKln87tK4iJCstpeWnLbORhgWnC/vMcXc2OS3TPdFW/N6yWosDcMESXvNmTSj4rIZKICwoG52qYudrO2Wrg/2TH/0cP/xpXQsVPSyUQnt9x86IR51dB4FmSvMn5jv+FvXTe10CAbaWOAf4ABhq3gtp75jUFKDvT7l0cJtwP5teJp74SqYm7/xaudkHe84/bUJbJbTzQktHFXM09N2ex74g/vVb60owAiLKK5yc+upLqnlySz+5DtIYvuio3QQRzL+loHFN2tLmHJumORJZmjfKqAx1lhiN7qmUt7/lk2jFi/2SGcGXX6TqnxtPKZNF6DwfKx5kMjuCAcUYyHV0xkfTrP3jucfnnjkAP9RUqBRziB3rW4iB7mbEcufglcLfG//uZI84MQ== id_rsa_starlight
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDBZQjPKoyVGC4Sj5r5Cpzclr2q/EYpL3fK6j1Qt0eVv0+qSE8tbnD8TnW/xtjl2N/z59kq9C9ys76YUAKma/MSp26Kwk1zA0Hki1bPVKeH69zrMra49LIyf25Kbaiou+ofBYEebyPob7c/RsPpVhI/nLtO3t3GUKUdNEKOH2eCKICIPtj3MOv1YnMTzW1ICgrU2EDlf6PYZ5caEGiTRV5xmPN3LKGDM6MnzZ7ZPiukkQrm46HJU38rQvSGAgXYYXybYtD9CcZgFzUpmdDQ42uQ8CsoX0Jw7nifCI05r/rOY1zgbmHC3rEYyG0Izw/2Z6ba2KqUXECmM3sgBjEgR3L9r1kdXlDwKDpiNAy8pMH6wowmrqpRRF+gSSlmPlP5+RfHl7Yuv0OB5bUh02xqDNL9AiCVc5jNX7BN3dIwL5gSKf9H7BV71L+2U0kqsRcInw+v950HigoJ9GRgJiQOAERd0RyDu4mrQsRGP2ALZcUE8QnbUMbNFsxeLjVotJq2mME8GXmKLQ3zAo3VCnfUXcl0MnD3wk1V7RR9JrRhvbwIZejFSKVuDCy5voKLuXriPcUcBFktZFLrRcHhqpnfoHWkkI/OLAle1MjBxUNUnKoPYjAtiQLWuRSGMRjfeUEbg3ONWS5Bb4Pu1lsyqzd7bVIpXOdanh2IJ1fdWEZf3umg4Q== id_rsa_jinchen_me
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0Y5qFSkDD2g7svOeSXxzggB95IwN7zpMTy9iiE6QAME2TxRV/mor65V/OY2+5CcrZmgqY6db3XFYDH9CRc1DCkZcLC6Il/g5xyqtK3pFs3hdcUSJ3wPoa5IgKUNRoWWLmKxzcP48pMKGVwddV48xReV2HWowQbBuIG9sMv/I2OdZiAVuoBO3pQqKTyZOnDQVpuZbRa1z0j8vtoWWSfzjjJmBpQeNB5DWfOGAQ7eSCoxZVEXdsKFwuZ/b8cFsvbW4BET9L0SM2CkZIkG/DjNGYVWdGcd3KfFWuGdrEEE9WRieRQQqakiXerTPssJ+lQ40LymPgs/J3fXiZXGIZ7fYJ root@mole-server
chpasswd:
  list: |
    root:mole
  expire: false
EOT

echo -e "\nBuild network-config-v2.yaml ${SECTION_BREAK}"
tee network-config-v2.yaml <<EOT
version: 2
ethernets:
  eth0:
    dhcp4: false
    match:
      macaddress: ${VM_MAC}
    set-name: eth0
    addresses: [${VM_IP}]
    gateway4: ${VM_GATEWAY}
    nameservers:
      search: [${VM_DNS_SEARCH}]
      addresses: [${VM_DNS}]
EOT

echo -e "\nBuild seed.iso ${SECTION_BREAK}"
run "cloud-localds -v --network-config network-config-v2.yaml seed.iso user-data meta-data"
echo $CMD

echo -e "\nRun command ${SECTION_BREAK}"
run virt-install \
    --name ${VM_NAME} \
    --memory 1024 \
    --vcpus 2 \
    --hvm \
    --os-type=linux \
    --os-variant=ubuntu18.04 \
    --disk ${VM_PATH}/${VM_NAME}.qcow2,device=disk,bus=virtio,size=${VM_STORE_SIZE},backing_store=${VM_BACK_STORE} \
    --disk ${VM_PATH}/seed.iso,device=cdrom \
    --network network=${VM_NET},mac=${VM_MAC} \
    --graphics none \
    --import \
    --noautoconsole
run "$VIRSH autostart ${VM_NAME}"
# ] <-- needed because of Argbash
